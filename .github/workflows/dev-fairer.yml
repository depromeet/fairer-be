# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: dev-fairer

on:
  push:
    branches: [ develop ]
  pull_request:
    branches : [ develop ]

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew # gradle wrapper를 실행할 수 있도록 권한 부여
        shell: bash

      - name: Build with Gradle
        run: ./gradlew clean build # 프로젝트 빌드
        shell: bash

      - name: Get current time
        uses: 1466587594/get-current-time@v2  # 빌드 완료 시간 가져오기
        id: current-time
        with:
          format: YYYY-MM-DDTHH-mm-ss
          utcOffset: "+09:00"

      - name: Show Current Time
        run: echo "CurrentTime=${{steps.current-time.outputs.formattedTime}}" # 빌드 완료 시간 출력하기
        shell: bash
<<<<<<< HEAD


=======
      
      # gradle build를 통해 만들어진 jar 파일 beanstalk에 배포하기 위한 zip 파일로 만듬
      - name: Generate deployment package
        run: |
          mkdir -p deploy
          cp build/libs/*.jar deploy/application.jar
          cp Procfile deploy/Procfile
          cp -r .ebextensions deploy/.ebextensions
          cd deploy && zip -r deploy.zip .

      # Beanstalk Deploy 플러그인 사용
      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v19
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}     # github secrets로 등록한 값 사용
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # github secrets로 등록한 값 사용
          application_name: nanagong-api         # EB application 이름
          environment_name: Nanagongapi-env    # EB environment 이름
          version_label: github-action-${{steps.current-time.outputs.formattedTime}}
          region: ap-northeast-2
          deployment_package: deploy/deploy.zip
          wait_for_environment_recovery: 360
>>>>>>> origin/feat/domain

          #     - name: Install Utilities
          #       run: |
          #         sudo apt-get update
          #         sudo apt-get install -y jq unzip

          #     - name: Install AWS Client
          #       run: |
          #         curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          #         unzip awscliv2.zip
          #          sudo ./aws/install || true
          #          aws --version
          #         curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "lightsailctl"
          #         sudo mv "lightsailctl" "/usr/local/bin/lightsailctl"
          #         sudo chmod +x /usr/local/bin/lightsailctl

          #     - name: Configure AWS credentials
          #       uses: aws-actions/configure-aws-credentials@v1
          #       with:
          #         aws-region: ${{ env.AWS_REGION }}
          #           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          #           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

          #       - name: Build Docker Image
          #         run: docker build -t ${{ env.AWS_LIGHTSAIL_SERVICE_NAME }}:release .

#       - name: Push and Deploy
#         run: |
#           service_name=${{ env.AWS_LIGHTSAIL_SERVICE_NAME }}
#           aws lightsail push-container-image \
#             --region ${{ env.AWS_REGION }} \
#             --service-name ${service_name} \
#             --label ${service_name} \
#             --image ${service_name}:release
#           aws lightsail get-container-images --service-name ${service_name} | jq --raw-output ".containerImages[0].image" > image.txt
#           jq --arg image $(cat image.txt) '.containers.app.image = $image' container.template.json > container.json
#           aws lightsail create-container-service-deployment --service-name ${service_name} --cli-input-json file://$(pwd)/container.json
